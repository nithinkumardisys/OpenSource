<configuration>
	<system.web>
		<httpRuntime enableVersionHeader="false" />
		<!-- Removes ASP.NET version header. -->
		<httpCookies httpOnlyCookies="true" requireSSL="true" mode="None" />
	</system.web>
	<system.webServer>
		<security>
			<requestFiltering removeServerHeader="true">
				<verbs allowUnlisted="true">
					<add verb="OPTIONS" allowed="false"/>
					<add verb="TRACE" allowed="false"/>
				</verbs>
			</requestFiltering>
		</security>
		<rewrite>
			<outboundRules rewriteBeforeCache="true">
				<rule name ="Remove Server Header">
					<match serverVariable="RESPONSE_Server" pattern=".+"/>
					<action type="Rewrite" value=""/>
				</rule>
			</outboundRules>
		</rewrite>
		<httpProtocol>
			<customHeaders>
				<clear />
				<!-- Gets rid of the other unwanted headers -->
				<add name="X-Frame-Options" value="SAMEORIGIN"/>
				<!-- disables iframing the website from other than the origin -->
				<add name="X-Xss-Protection" value="1; mode=block"/>
				<!-- configure the built in reflective XSS protection found in Internet Explorer, Chrome and Safari (Webkit). -->
				<add name="X-Content-Type-Options" value="nosniff"/>
				<!-- prevents Google Chrome and Internet Explorer from trying to mime-sniff the content-type of a response away from the one being declared by the server -->
				<!--<add name="Content-Security-Policy" value="upgrade-insecure-requests; base-uri 'self'; frame-ancestors 'self'; form-action 'self'; object-src 'none';"/>-->
				<!-- It is a compplex policy of what can execute. This can be really restrictive so please read up on it if you tighten it. I have laid out basic setting that is very permissive and will not save you from XSS attacks. https://content-security-policy.com/ or https://infosec.mozilla.org/guidelines/web_security#content-security-policy -->

				<!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy - Sets the referrer policy. Use for CORS -->
				<add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains; preload"/>
				<!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security - HSTS allows you to tell a browser that you always want a user to connect using HTTPS instead of HTTP. his policy will enforce TLS on your site and all subdomains for a year. -->
				<add name="Permissions-Policy" value="accelerometer=(self), camera=(self), geolocation=(self), gyroscope=(self), magnetometer=(self), microphone=(self), payment=(self), usb=(self)" />
				<!-- used to disable certain features https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy -->
				<add name="X-Permitted-Cross-Domain-Policies" value="none"/>
				<!-- The X-Permitted-Cross-Domain-Policies header tells clients like Flash and Acrobat what cross-domain policies they can use. If you don’t want them to load data from your domain, set the header’s value to none -->
				<!--<add name="Expect-CT" value="max-age=86400, enforce"/>-->
				<!-- The Expect-CT header allows sites to opt in to reporting and/or enforcement of Certificate Transparency requirements, which prevents the use of misissued certificates for that site from going unnoticed. -->
				<remove name="X-Powered-By" />
				<remove name="Server" />
				<!-- removes the X-Powered-By:ASP.NET header -->
			</customHeaders>
		</httpProtocol>
	</system.webServer>
</configuration>